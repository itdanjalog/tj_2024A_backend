p.127
    - 객체 지향 프로그래밍 : 어떤 대상(객체)을 가지고 프로그래밍한다.

- 살펴보기
    - 객체(Object)
        - 학생정보 , 게시판 , 회원정보 , 제품 등등
        - 속성/필드/멤버변수 = 고유성질 과 함수/메소드 = 행위

- ex) 학생 객체 정의/만들기 => 클래스을 만든다.
    1. (설계) 학생 객체의 성질 과 행위 고민 해보자.
    2. 자바 에서는 객체 생성할려면 클래스가 무조건 필요하다 .
        - 자바스크립트는 클래스가 없어도 객체(JSON) { }형식 사용가능
    3. (객체를 설계하는 행위) 클래스 만들어보자.
        3-1 : class 예약어 작성한다
            class
        3-2 : class 이름 짓는 규칙
            - 클래스 이름은 무조건 대문자
            class Person{ }
        3-3 : { } 안에 클래스 멤버들을 선언

- ex ) 붕어빵 1000개 만들자.
    붕어빵( 객체 )
    붕어빵을 만들기 위한 틀( 클래스 )
        - 모양 , 재료( 밀가루 , 팥 , 슈크림 등등 )   - 속성/필드 => 고유성질
        - 굽기 , 뒤집기 , 넣기 -> 메소드/함수 => 행위
    ? 틀이 필요한 이유는 : 붕어빵(객체)을 미리 만들어진 규격/틀 맞추어 붕어빵(객체) 만들면 빠르니까.
    ? 같은 붕어빵 틀에서 만들어진 붕어빵들은 서로 다르다.
        붕어빵1 , 붕어빵2 , 붕어빵3

- ex ) '기아차' 기업에서 K5 모델의 차량을 1000 대 생상 예정입니다.
    내차 K5 , 친구차 K5 , 이모차 K5 ( 객체 )
    K5을 만들기 위한 틀( 클래스 )
        - 색상 , 엔진 , 타이어 , 시트 등등 --- 속성/필드 => 고유 성질
        - 전진 , 후진 , 주차 등등 => 메소드/함수 => 행위
    ? 내차 , 친구차 , 이모차는 모델/클래스 는 같지만 서로다른 실체/객체 이다.
    ? 내차의 색상이 검정이면 친구차는 흰색으로 할수도 있다.
    ? 그러므로 서로 다른 객체들 간의 식별자/번호 는 매우 중요하다.
======================================================================
클래스 살펴보기
    1. 클래스 속성 을 구현하는 멤버 변수

변수 vs 멤버변수/필드
    공통 : 자료형/타입


리터럴 / 상수 풀  : p.63
    3 , 3.14 , 'a' , true , false
자료형/타입
    기본자료형  : 7가지  ( 상수 풀 을 참조)
        boolean , char , byte , short , int ,long,float,double
            int a = 3;
            int b = 3;
            double c = 3.14;
            double double  d = 3.14  7.56;
                - JS : [ 3.14 , 7.56 ]
                - JAVA : [ 3.14  7.56  ]  - 같은 타입이면 배열 저장 가능
            double int  e = 3.14  3 ;
                - JS : [ 3.14 , 3 ]
                - JAVA : [ 3.14 , 3 ]    - 서로 다른 타입이면 배열에 저장 불가능 -> 객체

    참조자료형 : 그외    ( 객체 참조 ) + 기본자료형과 참조자료형을 조합해서 또하나의 자료형
       클래스 , 인터페이스  , 배열 , 열거타입
            붕어빵틀 붕어빵1 = new 붕어빵틀();
            붕어빵틀 붕어빵2 = new 붕어빵틀();

- 참조
    진표집.냉장고 = 털어
    .(도트)연산자 , 접근연산자 ,
    진표집.냉장고.케이크상자 =

- 클래스란?     객체의 설계도
- 객체 란?     생성된 실제 메모리(인스턴스) 물리적이고 와 추상적인 생각
- 인스턴스 란?  클래스 기반으로 생성된 메모리( 실제 메모리 )

    int a = 10;
        int : 기본자료형
        a : 변수명
        =  : 대입
        10 : 리터럴
            - 클래스 x , 객체 x  , 인스턴스 x  , 변수 o 에 들어있는 것 = 10(리터럴)
    Person p1 = new Person();
        Person : 참조자료형=기본자료형 외 모두 / 클래스
        p1 : 변수명
        = 대입
        new : 인스턴스화 ( 인스턴스 만드는 연산자 )
        Person() : 생성자( 생성/만들때 사용되는 연산자 )
            - 클래스 : Person , 객체 : o , 인스턴스 : o   , 변수 : o 에 들어있는 것 = 인스턴스
            - 변수을 통해 객체/인스턴스 멤버 사용할수 있다.

    Person p2 ;
            - 클래스 : Person , 객체 : o , 인스턴스 : x   , 변수 : o 에 들어있는 것 = 쓰레기값(알수없는 임시데이터)
            - 변수을 통해 객체/인턴스 멤버/내용물 사용할수 없다.

    - 활용
        Scanner scan = new Scanner(System.in);
            1. Scanner : Scanner 클래스 타입 ( 미리 만들어진 클래스들 --> 라이브러리 )
            2. scan : 변수명
            3. =  : 대입
            4. new : 인스턴화
            5. Scanner(System.in) : 생성자
            - scan변수는 안에는 무엇이 들어있을까?? Scanner설계도로 만든 의 객체/인스턴스
            - scan변수안에 멤버( 멤버변수/필드 , 멤버메소드/함수 )들을 접근할수 있다.   .(도트 연산자)
                - scan.next();
        Scanner scan;
            - scan.next(); [X] : scan변수 안에 인스턴스가 없으니까 .접근하면 아무것도 없다
                nullpointerexception
    - 활용2
        Phone 진표핸드폰 = new Phone();  // 인스턴스/객체 생성
            진표핸드폰.name = "갤럭시21";
            진표핸드폰.전화걸기();

        Phone 재석핸드폰 = new Phone();   // 인스턴스/객체 생성
            재석핸드폰.name = "갤럭시23";

        Phone 호동핸드폰;
            호동핸드폰.name = "갤럭시24";   // 인스턴스가 없으므로 . 할수 없다.

    - 실습 [ step6 패키지 ]
        [ 요구사항 ]
        1. 기능이 무한적으로 반복되도록 구현
            - 단 종료 버튼/입력 선택시 종료
        2. 기능 : 예금 , 출금 , 잔고확인 , 종료
            예금 : 입력받은 금액을 예금액에 더한다.
            출금 : 입력받은 금액을 예금액에서 빼기.
            잔고 : 현재 예금액을 확인
            종료 : 무한반복 종료/프로그램 종료
        3. 메뉴 : 1.예금 2.출금 3.잔고확인 4.종료
        4. 객체 설계
            Account 클래스 정의
                - balance : 예금액
                - number : 계좌번호
            Step6 클래스
                - main함수
        5. 객체 1개 생성
            balance = 0 , number : '123-123'

-----------------------------
JS 함수
    function add( num1 , num2 ) {
        let result;
        result = num1 + num2;
        return result;
    }
JAVA
    int add( int num1 , int num2 ) {
        int result;
        result = num1 + num2;
        return result;
    }



















