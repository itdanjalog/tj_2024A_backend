객체
    - 의사나 행위가 미치는 대상
    - 사람 , 자동차 , 건물 등등 , 즉 눈에 보이는 사물은 객체 ,
    - 주문 , 생산 , 괸라 등등 , 눈에 안보이는 것 도 객체
클래스란?
    - 객체의 속성 과 기능을 코드로 구현한 것
    - 클래스의 이름 , 속성 또는 특성이 필요하다.
    - ex) 학생
            학생 객체 : 학번 , 이름 , 학년 , 사는곳
            학생 클래스 : studentId , studentName , grade , address

    - 클래스 정의/만들기
        class 클래스명{
            멤버변수/필드
            메소드/함수
        }
    -  클래스명은 꼭!!!! 첫글자를 대문자로 해주세요

멤버변수/필드
    - 클래스 내부에 선언하고 객체의 속성을 나타내는 변수
    - 속성(property) , 특성(attribute) 표현 <---------> 자바는 다른 언어 또는 프로그램 들과 같이 융합 개발
    - 선언/정의
        class 클래스명{
            자료형 멤버변수명 ;
            자료형 멤버변수명 = 초기값;
        }

- 자료형
    1. 기본자료형 / 리터럴( 개발자가 직접 입력한 데이터 )
        - boolean , char , byte, short ,int(*) , long , float , double(*)
    2. 참조자료형
        - 클래스(String등) , 인터페이스 , 배열 , 열거타입 등등

    - 참조( 견주어 [사용하기]살펴보다. )
        객체를 ( 멤버변수/필드 , 함수/메소드) 보기
        .(도트연산자) 접근연산자
        변수명.멤버변수;
        변수명.함수명()

- 메소드란 ?
    - 함수/행위/방법 표현하기도 합니다.
    - 프로그래밍의 상호작용/협력 을 구현하기 위해 사용
    - 매개변수
        - 매개변수 / 인자값 / 인수 : 함수호출시 함수 안으로 들어오는 수

    - 리턴/반환
        - 리턴 / 반환       : 함수종료시 함수호출했던곳으로 반환해주는 값/종료

    - 메소드 정의 만들기
    반환타입 함수명( 타입 매개변수 ) {
        실행문;
        return 값/생략
    }
        - 반환타입 : return (값) 에 해당하는 타입/자료형 , 없으면 void
        - 함수명 : 카멜표기법
        - 타입 매개변수 : 함수안에 받을 타입과 매개변수명
        - 실행문; : 함수 호출시 실행되는 코드들
        - return : 함수 종료시 반환할 값 또는 종료

    - 카페 알바생                                                손님
                        <-------- 상호작용 --------->
    void 주문기능(  메뉴이름 , 돈 ){                               주문기능( 메뉴이름 , 돈  )

        제조~~~~~~~

        return 제조된메뉴
    }

    - 장점 :
        1  (코드재사용)               한번 정의하면 반복호출 재사용성이 좋다.
        2. (코드중복제거)             코드의 중복을 줄이고 조금더 간결한 코딩이 가능하다.
        3. (유지보수)                코드를 특정기능별 나눠{ }서 묶었기 때문에 유지보수 와 관리 편하다.
        4. (메모리효율성)             함수안에서의 변수선언은 지역변수 이므로 함수 종료시 초기화/사라짐.
        5. (라이브러리/프레임워크)     (남이 만든)함수의 내부적인 코드를 몰라도 사용은 가능하다.
        6. ()                       (내가 만든) 새로운 기능을 정의할수 있다.
        7. ()                       가독성 : 코드가 어떤 행위인지 쉽게 파악할수 있다. 함수명을 조금더 이해할수 있게 선정
        8. (JAVA타입일치)            JAVA 메소드/함수는 매개변수와 리턴 값들의 타입 일치 , 불일치하면 오류 발생
                                    - 오류 미리 방지 하므로써 조금 더 프로그래밍 가능 하다.
        9. (인자에 따라 결과얻기)      매개변수의 값에 따라 서로 다른 결과물을 얻어 낼수 있다.

- 객체 생성
    - 객체( 물리적 혹은 추상적 으로 객체 정의 )
    - 인스턴스( [물리적]실제로 컴퓨터 메모리의 할당된 객체의 메모리 )
        - new 연산자 사용
    - 정의/만들기
        클래스/타입 변수명 =  new 생성자명()
    - 생성자명 : 클래스명 동일
    - 클래스는 설계도 이므로 클래스내 멤버변수/필드 , 메소드를 사용할수 없다.
        - 그러므로 클래스내 멤버변수/필드 , 메소드를 사용하기 위해서는 객체/인스턴스 생성이 필수이다.

    Scanner scan;
    scan.nextInt(); [x]

    Scanner scan = new Scanner(System.in)
    scan.nextInt(); [o]







